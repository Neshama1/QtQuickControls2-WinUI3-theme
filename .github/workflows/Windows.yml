---
name: Windows
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  QT_VERSION: 6.3.1
  CMAKE_VERSION: 3.22.3
  NINJA_VERSION: 1.10.2
jobs:
  build:
    name: ${{ matrix.os.name }} ( ${{matrix.os.compiler }} ${{ matrix.kind }}, ${{ matrix.mode }} )
    runs-on: ${{ matrix.os.value }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Windows
            compiler: MSVC
            value: windows-latest
            triplet: x64-windows
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        kind:
          - shared
        mode:
          - release
          - debug
          - asan
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install msvc
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1

      - name: Update xmake
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND xmake update -s dev)
          
      - name: Download Ninja and CMake
        shell: cmake -P {0}
        run: |
          set(cmake_version "$ENV{CMAKE_VERSION}")
          set(ninja_version "$ENV{NINJA_VERSION}")

          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")

          if(EXISTS "${{ matrix.config.environment_script }}")
              message(STATUS "${{ matrix.config.environment_script }} EXISTS !")
          else()
              message(FATAL "${{ matrix.config.environment_script }} NOT EXISTS !")
          endif()
            
          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

          # Add to PATH environment variable
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
            set(path_separator ";")
          file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x ninja
              COMMAND chmod +x ${cmake_dir}/cmake
            )
          endif()

      - name: Download Qt
        id: qt
        shell: cmake -P {0}
        run: |
          set(qt_version "$ENV{QT_VERSION}")

          string(REGEX MATCH "^[0-9]+" qt_version_major "${qt_version}")
          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          set(url_os "windows_x86")
          set(qt_package_arch_suffix "win64_msvc2019_64")
          set(qt_dir_prefix "${qt_version}/msvc2019_64")
          set(qt_package_suffix "-Windows-Windows_10_21H2-MSVC2019-Windows-Windows_10_21H2-X86_64")

          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt${qt_version_major}_${qt_version_dotless}")
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>qt.qt${qt_version_major}.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
          set(qt_package_version ${CMAKE_MATCH_1})

          file(MAKE_DIRECTORY qt)

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt/${qt_dir_prefix}" qt_dir)
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt" qt_base_dir)
          message("::set-output name=qt_dir::${qt_dir}")
          message("::set-output name=qt_base_dir::${qt_base_dir}")
          message("::set-output name=qt_dir_prefix::${qt_dir_prefix}")

          message("Downloading Qt to ${qt_dir}")
          function(downloadAndExtract url archive)
            message("Downloading ${url}")
            file(DOWNLOAD "${url}" ./${archive} SHOW_PROGRESS)
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${archive} WORKING_DIRECTORY ${qt_base_dir})
          endfunction()

          foreach(package qtbase qtdeclarative)
            downloadAndExtract(
              "${qt_base_url}/qt.qt${qt_version_major}.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
            )
          endforeach()

          if("${qt_version_major}" STREQUAL "6")
            foreach(package qt5compat qtshadertools)
              downloadAndExtract(
                "${qt_base_url}/qt.qt6.${qt_version_dotless}.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
                ${package}.7z
              )
            endforeach()
          endif()
          execute_process(COMMAND pwd)
          execute_process(COMMAND dir)

      - name: Configure & Build
        id: confandbuild
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND pwd)
          execute_process(COMMAND dir)
          
          set(VS_RUNTIME "MD")
          if(${{ matrix.mode}} STREQUAL "debug")
              set(VS_RUNTIME "MDd")
          endif()

          execute_process(COMMAND ls -lAh "${{ steps.qt.outputs.qt_base_dir }}")
          execute_process(COMMAND xmake f -vD --yes -m ${{ matrix.mode }} -k ${{ matrix.kind }} --vs_runtime=${VS_RUNTIME} --qt="${{ steps.qt.outputs.qt_base_dir }}")
          execute_process(COMMAND xmake b -vD)
          
      - name: Install
        id: install
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND xmake install -v --installdir="$ENV{GITHUB_WORKSPACE}/qtquick-controls2-winui3-theme-output")
          
      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os.name }}-${{ matrix.os.compiler }}-${{ matrix.kind }}-${{ matrix.mode }}
          path: ${{ runner.workspace }}/qtquick-controls2-winui3-theme-output